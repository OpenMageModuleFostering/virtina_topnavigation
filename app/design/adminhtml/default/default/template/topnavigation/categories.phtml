<?php
/**
 * Virtina
 * @package    Virtina_Top_Navigation
 * @copyright  Copyright (c) 2015-2016 Virtina. (http://www.virtina.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */ ?>

<div class="entry-edit">
    <div class="entry-edit-head">
        <h4 class="icon-head head-edit-form fieldset-legend">
            <?php echo Mage::helper('topnavigation')->__('Categories') ?>
        </h4>
    </div>
    <fieldset id="grop_fields">
        <input type="hidden" name="category_id" id="category_id" value="<?php echo $this->getIdsString() ?>">
        <div id="product-categories" class="tree"></div>
    </fieldset>
</div>
<?php if($this->getRootNode() && $this->getRootNode()->hasChildren()): ?>
<script type="text/javascript">
    Ext.EventManager.onDocumentReady(function() {
        var categoryLoader = new Ext.tree.TreeLoader({
           dataUrl: '<?php echo $this->getLoadTreeUrl()?>'
        });

        categoryLoader.createNode = function(config) {
            config.uiProvider = Ext.tree.CheckboxNodeUI;
            var node;
            if (config.children && !config.children.length) {
                delete(config.children);
                node = new Ext.tree.AsyncTreeNode(config);

        } else {
                node = new Ext.tree.TreeNode(config);
            }
            return node;
        };
        categoryLoader.on("beforeload", function(treeLoader, node) {
            treeLoader.baseParams.category = node.attributes.id;
        });

        categoryLoader.on("load", function(treeLoader, node, config) {
            varienWindowOnload();
        });

    var tree = new Ext.tree.TreePanel('product-categories', {
            animate:true,
            loader: categoryLoader,
            enableDD:false,
            containerScroll: true,
            rootUIProvider: Ext.tree.CheckboxNodeUI,
            selModel: new Ext.tree.CheckNodeMultiSelectionModel(),
            rootVisible: '<?php echo $this->getRootNode()->getIsVisible() ?>'
        });

        tree.on('check', function(node) {
            if(node.attributes.checked) {
                categoryAdd(node.id);
                categoryAddToField(node.id);
            } else {
                categoryRemove(node.id);
                categoryRemoveFromField(node.id);
            }
            varienElementMethods.setHasChanges(node.getUI().checkbox);
        }, tree);
        var root = new Ext.tree.TreeNode({
            text: '<?php echo $this->jsQuoteEscape($this->getRootNode()->getName()) ?>',
            draggable:false,
            checked:'<?php echo $this->getRootNode()->getChecked() ?>',
            id:'<?php echo $this->getRootNode()->getId() ?>',
            disabled: <?php echo ($this->getRootNode()->getDisabled() ? 'true' : 'false') ?>,
            uiProvider: Ext.tree.CheckboxNodeUI
        });

        tree.setRootNode(root);
        bildCategoryTree(root, <?php echo $this->getTreeJson() ?>);
        tree.addListener('click', categoryClick.createDelegate(this));

    // render the tree
        tree.render();
        root.expand();
    //tree.expandAll();
    });

    function bildCategoryTree(parent, config){
    if (!config) return null;

        if (parent && config && config.length){
            for (var i = 0; i < config.length; i++){
                config[i].uiProvider = Ext.tree.CheckboxNodeUI;
                var node;
                var _node = Object.clone(config[i]);
                if (_node.children && !_node.children.length) {
                    delete(_node.children);
                    node = new Ext.tree.AsyncTreeNode(_node);

            } else {
                    node = new Ext.tree.TreeNode(config[i]);
                }
                parent.appendChild(node);
                node.loader = node.getOwnerTree().loader;
                if(config[i].children){
                    bildCategoryTree(node, config[i].children);
                }
            }
        }
    }

	function categoryClick(node, e){
        if (node.disabled) {
            return;
        }
        node.getUI().check(!node.getUI().checked());
        varienElementMethods.setHasChanges(Event.element(e), e);
    };	
    function categoryAddToField(id){
		if($("category_ids").value && $("category_ids").value != 'undefined') 
			ids =  $("category_ids").value + ',' +id; 
		else
			ids = id; 		
			var arr = ids.split(',').getUnique();
		$('category_ids').value = arr;
	}
    function categoryRemoveFromField(id){	
    var ids = $('category_ids').value.split(',');
        while (-1 != ids.indexOf(id)) {
            ids.splice(ids.indexOf(id), 1);
        }
    $('category_ids').value = ids.join(',');
	}	
	
	
    function categoryAdd(id) {
    var ids = $('category_id').value.split(',');
        ids.push(id);
    $('category_id').value = ids.join(',');
    }
    
    function categoryRemove(id) {
    var ids = $('category_id').value.split(',');
    // bug #7654 fixed
        while (-1 != ids.indexOf(id)) {
            ids.splice(ids.indexOf(id), 1);
        }
    $('category_id').value = ids.join(',');
    }
    
	Array.prototype.getUnique = function(){	// Function for getting unique values from array
	   var u = {}, a = [];
	   for(var i = 0, l = this.length; i < l; ++i){
		  if(u.hasOwnProperty(this[i])) {
			 continue;
		  }
		  a.push(this[i]);
		  u[this[i]] = 1;
	   }
	   return a;
	}    
</script>
<?php endif; ?>
